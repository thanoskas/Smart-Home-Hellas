substitutions:
  name: "shh-2r"
  friendly_name: "SHH-2R"
  project_name: "Shh.2-relay-board-beta"
  project_version: "1.0"
  device_description: Smart Home Hellas 2 Relay Device
  relay1_restore_mode: RESTORE_DEFAULT_OFF
  relay2_restore_mode: RESTORE_DEFAULT_OFF


esphome:
  name: "${name}"
  name_add_mac_suffix: true
  project:
    name: "${project_name}"
    version: "${project_version}"

esp32:
  board: esp32dev
  framework:
    type: arduino

dashboard_import:
  package_import_url: github://https://github.com/thanoskas/Smart-Home-Hellas/blob/main/shh-2r-beta.yaml


# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:
   reboot_timeout: 0s #360min
mqtt:
  broker: !secret broker
  port: !secret port
  username: !secret username
  password: !secret password
  discovery: true
  reboot_timeout: 0s #360min
#  topic_prefix: ${friendly_name}
#  log_topic: ${friendly_name}/logs



wifi:
#  use_address: 192.168.31.92
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password 

  ap:



# Example configuration entry for debug
#debug:
#  update_interval: 5s

captive_portal:

#esp32_improv:
#  authorizer: none

ota:


web_server:
  port: 80


status_led:
  pin:
    inverted: true
    number: GPIO2


time:
  - platform: sntp
    id: sntp_time

# GPIO16: Ρελέ 1 (10A)
# GPIO17: Ρελέ 2 (SSR 2A)
# GPIO21,22: Αισθητήρας I2C
# GPIO23: Θερμοκρασίες
# GPIO25: IN1 internal
# GPIO36: Αναλογική - Πίεσης


dallas:
  - pin: GPIO23
    update_interval: 30s

i2c:
  sda: 21
  scl: 22
  scan: True


sensor:
#DEBUG SENSORS
#  - platform: debug
#    free:
#      name: "${friendly_name} Heap Free"
#    fragmentation:
#      name: "${friendly_name} Heap Fragmentation"
#    block:
#      name: "${friendly_name} Heap Max Block"
#    loop_time:
#      name: "${friendly_name} Loop Time"

  - platform: bme280
    temperature:
     name: "${friendly_name} BME280 Εξωτερική Θερμοκρασία 1"
     id: bme280_temperature
     oversampling: 16x
     filters:
      - filter_out: nan

    pressure:
      name: "${friendly_name} BME280 Ατμ. Πίεση 2"
      id: bme280_pressure
    humidity:
      name: "${friendly_name} BME280 Σχετική Υγρασία 3"
      id: bme280_humidity
    address: 0x76
    update_interval: 60s

  - platform: template
    name: "${friendly_name} BME280 Απόλυτη Υγρασία 4"
    lambda: |-
      const float mw = 18.01534;    // molar mass of water g/mol
      const float r = 8.31447215;   // Universal gas constant J/mol/K
      return (6.112 * powf(2.718281828, (17.67 * id(bme280_temperature).state) /
        (id(bme280_temperature).state + 243.5)) * id(bme280_humidity).state * mw) /
        ((273.15 + id(bme280_temperature).state) * r); // in grams/m^3
    accuracy_decimals: 2
    update_interval: 60s
    icon: 'mdi:water'
    unit_of_measurement: 'g/m³'
  - platform: template
    name: "${friendly_name} BME280 Σημείο Δρόσου 5"
    lambda: |-
      return (243.5*(log(id(bme280_humidity).state/100)+((17.67*id(bme280_temperature).state)/
      (243.5+id(bme280_temperature).state)))/(17.67-log(id(bme280_humidity).state/100)-
      ((17.67*id(bme280_temperature).state)/(243.5+id(bme280_temperature).state))));
    unit_of_measurement: °C
    icon: 'mdi:thermometer-alert'



  - platform: dallas
    address: XXXXXXXXXXXXXXXXXXXXXX
    name: "${friendly_name} Θερμοκρασία S1"
    id: S1

  
    
  - platform: dallas
    address: XXXXXXXXXXXXXXXXXXXXXX
    name: "${friendly_name} Θερμοκρασία S2"
    id: S2


  - platform: dallas
    address: XXXXXXXXXXXXXXXXXXXXXX
    name: "${friendly_name} Θερμοκρασία S3"
    id: S3



  - platform: adc
    pin: GPIO36
    id: presure
    name: "${friendly_name} Πίεση 1"
    accuracy_decimals: 2
    update_interval: 60s
    attenuation: auto
    filters:
      - calibrate_linear:
            - 0.33 -> 0.00
            - 2.99 -> 12.00
    icon: 'mdi:gauge'
    unit_of_measurement: 'bar'



  - platform: uptime
    name: "${friendly_name} Χρόνος Λειτουργίας"
    id: uptime_seconds
  - platform: wifi_signal
    name: "${friendly_name} Σήμα WiFi"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"
  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "${friendly_name} Σήμα WiFi %"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"



switch:
  - platform: gpio
    pin:
      number: GPIO16
      inverted: False
    name: "${friendly_name} Ρελέ R1"
    id: relay1
#    restore_mode: ${relay1_restore_mode}
#    icon: mdi:electric-switch-closed
    icon: mdi:toggle-switch-variant

  - platform: gpio
    pin:
      number: GPIO17
      inverted: False
    name: "${friendly_name} Ρελέ R2"
    id: relay2
#    restore_mode: ${relay2_restore_mode}
    icon: mdi:toggle-switch-variant


binary_sensor:
  - platform: status
    name: "${friendly_name} Status"

  - platform: gpio
    name: "${name} Είσοδος 1"
    id: input1
    pin:
      number: GPIO25
      inverted: True
      mode: INPUT_PULLUP
#    device_class: heat
#    icon: 'mdi:fire-circle'
    filters:
     - delayed_on_off: 100ms



text_sensor:
#DEBUG TEXT SRENSORS
#  - platform: debug
#    device:
#      name: "${friendly_name} Device Info"
#    reset_reason:
#      name: "${friendly_name} Reset Reason"
  - platform: version
    name: "${friendly_name} Έκδοση"
    hide_timestamp: true
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP Address"
#      disabled_by_default: true
    ssid:
      name: "${friendly_name} ESP Συνδεδεμένο SSID"
#    bssid:
#      name: "ESP Connected BSSID"
    mac_address:
      name: "${friendly_name} ESP Mac Wifi Address"

  - platform: template
    name: "${friendly_name} Χρόνος Λειτουργίας Ευανάγνωστο"
    lambda: |-
      uint32_t dur = id(uptime_seconds).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud, %02u:%02u:%02u", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 60s


  - platform: template
    name: "${friendly_name} Time"
    lambda: |-
      char str[17];
      time_t currTime = id(sntp_time).now().timestamp;
      strftime(str, sizeof(str), "%d-%m-%Y %H:%M", localtime(&currTime));
      return  { str };
    update_interval: 60s
