###############################################################################################

###     DO NOT FLASH IT AS IT IS - DALLAS CODES MISSING FROM IMPORTED CONFIG YAML !!!    ######

###                             SMART HOME HELLAS                                          ###

###      first time flash with https://adafruit.github.io/Adafruit_WebSerial_ESPTool/      ###
###############################################################################################

substitutions:
  name: "shh-mon"
  friendly_name: "shh mon"
  project_name: "shh.mon"
  project_version: "3.0"
  device_description: "Smart Home Hellas Monitoring Device"



esphome:
  name: "${name}"
  name_add_mac_suffix: true
  project:
    name: ${project_name}
    version: ${project_version}

esp32:
  board: lolin_s2_mini
  variant: ESP32S2
  framework:
    type: arduino

dashboard_import:
  package_import_url: github://thanoskas/Smart-Home-Hellas/blob/main/shh-mon-v3.yaml


api:


# Enable logging
logger:



wifi:
  use_address: 192.168.31.92
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password 
  - ssid: "ALEXALARM"
    password: "alexgeorge"
  ap:



captive_portal:

#esp32_improv:
#  authorizer: none

ota:


web_server:



status_led:
  pin:
    inverted: true
    number: GPIO15

dallas:
  - pin: GPIO18

i2c:
  sda: 33
  scl: 35
  scan: True



sensor:
  - platform: dallas
    address: XXXXXXXXXXXXXXXXXXX
    name: "${friendly_name} S1"
    id: S1

  - platform: dallas
    address: XXXXXXXXXXXXXXXXXXX
    name: "${friendly_name} S2"
    id: S2

  - platform: dallas
    address: XXXXXXXXXXXXXXXXXXX
    name: "${friendly_name} S3"
    id: S3






  - platform: bme280_i2c
    temperature:
     name: "${friendly_name} BME280 Outside Temp"
     id: bme280_temperature
     oversampling: 16x
     filters:
      - filter_out: nan

    pressure:
      name: "${friendly_name} BME280 Atm Pressure"
      id: bme280_pressure
    humidity:
      name: "${friendly_name} BME280 Rel. Humidity"
      id: bme280_humidity
    address: 0x76
    update_interval: 60s

  - platform: template
    name: "${friendly_name} BME280 Abs. Humidity"
    lambda: |-
      const float mw = 18.01534;    // molar mass of water g/mol
      const float r = 8.31447215;   // Universal gas constant J/mol/K
      return (6.112 * powf(2.718281828, (17.67 * id(bme280_temperature).state) /
        (id(bme280_temperature).state + 243.5)) * id(bme280_humidity).state * mw) /
        ((273.15 + id(bme280_temperature).state) * r); // in grams/m^3
    accuracy_decimals: 2
    update_interval: 60s
    icon: 'mdi:water'
    unit_of_measurement: 'g/mÂ³'
  - platform: template
    name: "${friendly_name} BME280 Dew Point"
    lambda: |-
      return (243.5*(log(id(bme280_humidity).state/100)+((17.67*id(bme280_temperature).state)/
      (243.5+id(bme280_temperature).state)))/(17.67-log(id(bme280_humidity).state/100)-
      ((17.67*id(bme280_temperature).state)/(243.5+id(bme280_temperature).state))));
    unit_of_measurement: Â°C
    icon: 'mdi:thermometer-alert'



  - platform: adc
    pin: GPIO3
    id: presure1
    name: "${friendly_name} Pressure 1"
    accuracy_decimals: 2
    update_interval: 60s
    attenuation: auto
    filters:
      - calibrate_linear:
            - 0.31 -> 0.00
            - 2.52 -> 10.2
    icon: 'mdi:gauge'
    unit_of_measurement: 'bar'

  - platform: ultrasonic
    id: oil_height
    name: "${friendly_name} Tank Height cm"  
    trigger_pin: GPIO39
    echo_pin: GPIO37
#    pulse_time: 20us
    accuracy_decimals: 2
    timeout: 4.0m
    filters:
      - filter_out: nan
#      - sliding_window_moving_average:
#          window_size: 10
#          send_every: 10
#          send_first_at: 1
#      - lambda: return (id(tank_height).state) - (x * 100);
    unit_of_measurement: "cm"
    icon: 'mdi:gas-station'



  - platform: uptime
    name: "${friendly_name} Uptime"
    id: uptime_seconds
  - platform: wifi_signal
    name: "${friendly_name} WiFi Singnal"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"
  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "${friendly_name} WiFi Singnal %"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
 
binary_sensor:
  - platform: gpio
    name: "${friendly_name} Input 1"
    id: input1
    pin:
      number: GPIO07
      inverted: True
      mode: INPUT_PULLUP
#    device_class: heat
#    icon: 'mdi:fire-circle'
    filters:
     - delayed_on_off: 100ms

  - platform: gpio
    name: "${friendly_name} Input 2"
    id: input2
    pin:
      number: GPIO05
      inverted: True
      mode: INPUT_PULLUP
#    device_class: heat
#    icon: 'mdi:fire-circle'
    filters:
     - delayed_on_off: 100ms
    



text_sensor:
#DEBUG TEXT SRENSORS
#  - platform: debug
#    device:
#      name: "Device Info"
#    reset_reason:
#      name: "Reset Reason"
  - platform: version
    name: "${friendly_name} Version"
    hide_timestamp: true
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP Address"
    ssid:
      name: "${friendly_name} Connected SSID"
#    bssid:
#      name: "ESP Connected BSSID"
    mac_address:
      name: "${friendly_name} ESP Mac Wifi Address"

  - platform: template
    name: "${friendly_name} Uptime Readable"
    lambda: |-
      uint32_t dur = id(uptime_seconds).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud, %02u:%02u:%02u", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 60s

